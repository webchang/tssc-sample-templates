apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: concert-upload-cd
spec:
  description: >-
    Upload CD data to Concert.
  params:
    - name: event-type
      type: string
    - name: source-url
      type: string
    - name: source-commit
      type: string
    - name: source-commit-timestamp
      type: string
    - name: concert-enabled
      type: string
      default: "false"
    - name: concert-component-version
      type: string
      default: "1.0.0"
  workspaces:
    - name: concert-api
      description: Concert API endpoint and credentials
    - name: workspace
      description: The workspace where source code is included.
      optional: true
  steps:
    - name: concert-enablement-validation
      image: registry.access.redhat.com/ubi8-minimal@sha256:7583ca0ea52001562bd81a961da3f75222209e6192e4e413ee226cff97dbd48c
      env:
        - name: EVENT_TYPE
          value: $(params.event-type)
        - name: SOURCE_URL
          value: $(params.source-url)
        - name: SOURCE_COMMIT
          value: $(params.source-commit)
        - name: SOURCE_COMMIT_TIMESTAMP
          value: $(params.source-commit-timestamp)
        - name: CONCERT_ENABLED
          value: $(params.concert-enabled)
        - name: WORKSPACE_CONCERT_API
          value: $(workspaces.concert-api.path)
        - name: WORKSPACE
          value: $(workspaces.workspace.path)
      script: |
        #!/usr/bin/env bash

        if [[ ${CONCERT_ENABLED} != "true" ]]; then
          echo "Concert is not enabled"
          exit 1
        fi

        if [[ ${EVENT_TYPE} != "push" ]]; then
          echo "Concert task was not trigger by a push event"
          exit 1
        fi

        TIMESTAMP=$(date -d "@${SOURCE_COMMIT_TIMESTAMP}" -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "Source repo URL: $SOURCE_URL"
        echo "Source repo commit: $SOURCE_COMMIT"
        echo "Source repo commit timestamp: $TIMESTAMP"

        curl -sS -H "Authorization: $(cat ${WORKSPACE_CONCERT_API}/key-type) $(cat ${WORKSPACE_CONCERT_API}/key-value)" -H "InstanceId: $(cat ${WORKSPACE_CONCERT_API}/instance-id)"  $(cat ${WORKSPACE_CONCERT_API}/endpoint-url)/core/api/v1/applications 2>&1 > $WORKSPACE/log.txt

        if [[ $? == 0 ]]; then
          echo "Target Concert service is reachable"
        else
          echo "Target Concert service is not reachable"
          cat $WORKSPACE/log.txt
          exit 1
        fi

        PUSH_PIPELINERUN=$WORKSPACE/source/.tekton/gitops-on-push.yaml
        if [ ! -s ${PUSH_PIPELINERUN} ]; then
          echo "PipelineRun file is empty or unavailable: ${PUSH_PIPELINERUN}"
          exit 1
        fi

        CONCERT_COMPONENT_NAME=$(grep "argocd/app-name" ${PUSH_PIPELINERUN} | cut -d ':' -f 2 | sed 's/^ *//')
        echo "Concert component and app name: ${CONCERT_COMPONENT_NAME}"

        mkdir -p $WORKSPACE/concert
        CONCERT_HOME=$WORKSPACE/concert
        echo "Concert home directory: $CONCERT_HOME"

    - name: upload-concertdef-deploy-app
      image: quay.io/konflux-ci/appstudio-utils:48c311af02858e2422d6229600e9959e496ddef1@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8
      env:
        - name: SOURCE_URL
          value: $(params.source-url)
        - name: SOURCE_COMMIT
          value: $(params.source-commit)
        - name: SOURCE_COMMIT_TIMESTAMP
          value: $(params.source-commit-timestamp)
        - name: CONCERT_COMPONENT_VERSION
          value: $(params.concert-component-version)
        - name: WORKSPACE_CONCERT_API
          value: $(workspaces.concert-api.path)
        - name: WORKSPACE
          value: $(workspaces.workspace.path)
      script: |
        #!/usr/bin/env bash

        TIMESTAMP=$(date -d "@${SOURCE_COMMIT_TIMESTAMP}" -u +"%Y-%m-%dT%H:%M:%SZ")

        PUSH_PIPELINERUN=$WORKSPACE/source/.tekton/gitops-on-push.yaml
        APP_YAML=$WORKSPACE/source/application.yaml

        CONCERT_COMPONENT_NAME=$(grep "kubernetes-id" ${PUSH_PIPELINERUN} | cut -d ':' -f 2 | sed 's/^ *//')

        ###
        # Generate ConcertDef Deploy Inventory SBOM
        #
        CONCERT_HOME=$WORKSPACE/concert
        DEPLOY_SBOM=${CONCERT_HOME}/${CONCERT_COMPONENT_NAME}-deploy.json

        # environment type as defined by dir names 
        #
        ENV_TYPE="development"

        # K8 ID: backstage.io/kubernetes-id: py3svc
        #
        K8ID=$(grep "kubernetes-id" ${PUSH_PIPELINERUN} | cut -d ':' -f 2 | sed 's/^ *//')

        RUNTIME_COMPONENT_NAME=${K8ID}-${ENV_TYPE}

        # [application.yaml] .spec.destination.server
        API_SERVER=$(grep "server" ${APP_YAML} | sed 's/^ *server: //')

        CODE_COMPONENT_NAME=$(basename ${SOURCE_URL})

        # K8 namespace: backstage.io/kubernetes-namespace: rhtap-app
        # or
        # [application.yaml] .spec.destination.namespace
        K8NS=$(grep "kubernetes-namespace" ${PUSH_PIPELINERUN} | cut -d ':' -f 2 | sed 's/^ *//')
        DEPLOY_NS=${K8NS}-${ENV_TYPE}

        IMAGE_NAME="TBD"

        # Initialize deploy inventory SBOM with a container object
        #
        tempfile=$(mktemp)
        jq --arg timestamp ${TIMESTAMP} \
          --arg environment ${ENV_TYPE} \
          --arg component_name ${CONCERT_COMPONENT_NAME} \
          --arg component_version ${CONCERT_COMPONENT_VERSION} \
          --arg deploy_number ${TIMESTAMP} \
          --arg code_name ${CODE_COMPONENT_NAME} \
          --arg code_purl ${SOURCE_URL} \
          --arg code_commit ${SOURCE_COMMIT} \
          --arg runtime_component_name ${RUNTIME_COMPONENT_NAME} \
          --arg api_server ${API_SERVER} \
          --arg deploy_ns ${DEPLOY_NS} \
          --arg image_name ${IMAGE_NAME} \
          -n '{"bomFormat": "ConcertDef", "specVersion": "1.0.2", "metadata": {"timestamp": $timestamp, "type": "deploy", "environment": $environment, "component": {"name": $component_name, "version": $component_version, "deploy-number": $deploy_number}}, "components": [{"type": "code", "name": $code_name, "purl": $code_purl}], "runtime-components": [ {"type": "kubernetes", "name": $runtime_component_name, "api-server": $api_server, "components": [{"type": "namespace", "name": $deploy_ns, "components": [{"type": "container", "name": $image_name, "uri": $image_name}]}]}]}' \
          > $tempfile
        cp ${tempfile} ${DEPLOY_SBOM}

        echo "Contents of ConcertDef Deploy Inventory SBOM: ${DEPLOY_SBOM}"
        jq . ${DEPLOY_SBOM}

        ###
        # Upload ConcertDef DEPLOY Inventory SBOM
        #
        UPLOAD_URL=$(cat ${WORKSPACE_CONCERT_API}/endpoint-url)/ingestion/api/v1/upload_files
        AUTH_TYPE=$(cat ${WORKSPACE_CONCERT_API}/key-type)
        AUTH_KEY=$(cat ${WORKSPACE_CONCERT_API}/key-value)
        curl -X POST -sS "${UPLOAD_URL}" \
          -H 'accept: application/json' \
          -H "InstanceID: $(cat ${WORKSPACE_CONCERT_API}/instance-id)" \
          -H "Authorization: ${AUTH_TYPE} ${AUTH_KEY}" \
          -H 'Content-Type: multipart/form-data' \
          -F "data_type=application_sbom" \
          -F "filename=@${DEPLOY_SBOM}" \
          2>&1 > $WORKSPACE/log.txt

        if [[ $? == 0 ]]; then
          echo "Successfully uploaded ConcertDef Deploy Inventory SBOM to Concert"
        else
          echo "Failed to upload ConcertDef Deploy Inventory SBOM to Concert"
          cat $WORKSPACE/log.txt
        fi
