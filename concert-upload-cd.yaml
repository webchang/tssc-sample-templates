apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: concert-upload-cd
spec:
  description: >-
    Upload CD data to Concert.
  params:
    - name: event-type
      type: string
    - name: source-url
      type: string
    - name: source-commit
      type: string
    - name: source-commit-timestamp
      type: string
    - name: if-concert-enabled
      type: string
      default: "false"
    - name: concert-component-version
      type: string
      default: "1.0.0"
  workspaces:
    - name: concert-api
      description: Concert API endpoint and credentials
    - name: workspace
      description: The workspace where source code is included.
      optional: true
  steps:
    - name: concert-enablement-validation
      image: registry.access.redhat.com/ubi8-minimal@sha256:7583ca0ea52001562bd81a961da3f75222209e6192e4e413ee226cff97dbd48c
      env:
        - name: EVENT_TYPE
          value: $(params.event-type)
        - name: SOURCE_URL
          value: $(params.source-url)
        - name: SOURCE_COMMIT
          value: $(params.source-commit)
        - name: SOURCE_COMMIT_TIMESTAMP
          value: $(params.source-commit-timestamp)
        - name: IF_CONCERT_ENABLED
          value: $(params.if-concert-enabled)
        - name: WORKSPACE_CONCERT_API
          value: $(workspaces.concert-api.path)
        - name: WORKSPACE
          value: $(workspaces.workspace.path)
      script: |
        #!/usr/bin/env bash
        
        if [[ ${IF_CONCERT_ENABLED} == "false" ]]; then
          echo "Skip concert-upload-ci since Concert was not enabled."
          exit 0
        fi

        if [[ ${EVENT_TYPE} != "push" ]]; then
          echo "Skip concert-upload-ci since this pipelinerun was not triggered by a push event."
          exit 0
        fi

        tempfile=$(mktemp)

        TIMESTAMP=$(date -d "@${SOURCE_COMMIT_TIMESTAMP}" -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "Source repo URL: $SOURCE_URL"
        echo "Source repo commit: $SOURCE_COMMIT"
        echo "Source repo commit timestamp: $TIMESTAMP"

        # Create the local home directory for Concert
        #
        mkdir -p $WORKSPACE/concert

        ###
        # Check reachability to the target Concert service
        #
        curl -sS -H "Authorization: $(cat ${WORKSPACE_CONCERT_API}/key-type) $(cat ${WORKSPACE_CONCERT_API}/key-value)" -H "InstanceId: $(cat ${WORKSPACE_CONCERT_API}/instance-id)"  $(cat ${WORKSPACE_CONCERT_API}/endpoint-url)/core/api/v1/applications 2>&1 > $tempfile

        if [[ $? == 0 ]]; then
          echo "Target Concert service is reachable"
        else
          echo "Target Concert service is not reachable"
          cat $tempfile
          exit 1
        fi

    - name: upload-concertdef-deploy-app
      image: quay.io/konflux-ci/appstudio-utils:48c311af02858e2422d6229600e9959e496ddef1@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8
      env:
        - name: SOURCE_URL
          value: $(params.source-url)
        - name: SOURCE_COMMIT
          value: $(params.source-commit)
        - name: SOURCE_COMMIT_TIMESTAMP
          value: $(params.source-commit-timestamp)
        - name: COMPONENT_VERSION
          value: $(params.concert-component-version)
        - name: WORKSPACE_CONCERT_API
          value: $(workspaces.concert-api.path)
        - name: WORKSPACE
          value: $(workspaces.workspace.path)
      script: |
        #!/usr/bin/env bash

        tempfile=$(mktemp)
        TIMESTAMP=$(date -d "@${SOURCE_COMMIT_TIMESTAMP}" -u +"%Y-%m-%dT%H:%M:%SZ")

        GITOPS_APP_OF_APP=$WORKSPACE/source/application.yaml
        COMPONENT_NAME=$(yq '.metadata.name' ${GITOPS_APP_OF_APP})

        ###
        # Discover updated images in the latest commit
        #
        cd $WORKSPACE/source

        GITOPS_UPDATES=$(mktemp)
        git log --raw -n 1 HEAD \
          | grep "components/${COMPONENT_NAME}/.*-patch.yaml" \
          | tee ${GITOPS_UPDATES}

        # GITOPS_UPDATES=$(mktemp)
        # git log --pretty=format: --name-only -n 1 HEAD \
        #   | grep "components/${COMPONENT_NAME}/.*-patch.yaml" \
        #   | tee ${GITOPS_UPDATES}

        if [[ ! -s ${GITOPS_UPDATES} ]]; then
          echo "Latest git commit did not make any change to in-scope deployment overlay files."
          echo "There is no need to geneare and upload a ConcertDef DEPLOY INVENTORY SBOM."
          exit 0
        fi

        GITOPS_ARRAY=()
        while IFS= read -r filepath; do
          GITOPS_ARRAY+=("$filepath")
        done < ${GITOPS_UPDATES}

        for overlay_file in "${GITOPS_ARRAY[@]}"; do
          echo "Overlay file path in $WORKSPACE/source: ${overlay_file}"
          ls -l $WORKSPACE/source/${overlay_file}
        done
        echo "------"

        ###
        # Generate ConcertDef Deploy Inventory SBOM
        ###

        for overlay_file in "${GITOPS_ARRAY[@]}"; do

          ###
          # Discover deployment environments type and image URI & name (path+tag)
          #
          ENV_TYPE=$(echo "${overlay_file}" | cut -d '/' -f 4)
          echo "GitOps deployment environment: ${ENV_TYPE}"

          OVERLAY_YAML=$WORKSPACE/source/${overlay_file}
          IMAGE_URI=$(yq '.spec.template.spec.containers[0].image' ${OVERLAY_YAML})
          IMAGE_NAME=$(echo ${IMAGE_URI} | cut -d '@' -f 1)
          if [[ -z ${IMAGE_NAME} ]]; then
            echo "encourntered an empty image name, continue"
            continue
          fi

          ###
          # Discover environment-dependent application definition YAML 
          #
          if [[ ${ENV_TYPE} == "development" ]]; then
            if [[ -s $WORKSPACE/source/app-of-apps/application-dev.yaml ]]; then
              APP_DEF_YAML="$WORKSPACE/source/app-of-apps/application-dev.yaml"
            elif [ -s $WORKSPACE/source/app-of-apps/application-development.yaml ]]; then
              APP_DEF_YAML="$WORKSPACE/source/app-of-apps/application-development.yaml"
            else
              echo "Applcation definition YAML for ${ENV_TYPE} could not be found, continue"
              continue
            fi
          elif [[ -s $WORKSPACE/source/app-of-apps/application-${ENV_TYPE}.yaml ]]; then
            APP_DEF_YAML="$WORKSPACE/source/app-of-apps/application-${ENV_TYPE}.yaml"
          else
            echo "Applcation definition YAML for ${ENV_TYPE} could not be found, continue"
            continue
          fi

          ###
          # Generate ConcertDef Deploy Inventory SBOM
          #
          DEPLOY_SBOM=$WORKSPACE/concert/${COMPONENT_NAME}-deploy.json
          CODE_COMPONENT_NAME=$(basename ${SOURCE_URL})

          RHDH_APP_INSTANCE=$(yq '.metadata.name' ${APP_DEF_YAML})
          RHDH_K8_ID=${COMPONENT_NAME}
          RHDH_K8_NS=$(yq '.spec.destination.namespace' ${APP_DEF_YAML})
          RHDH_K8_SERVER=$(yq '.spec.destination.server' ${APP_DEF_YAML})

          ###
          # Initialize deploy inventory SBOM with a container object
          #
          jq --arg timestamp ${TIMESTAMP} \
            --arg app_env ${RHDH_APP_INSTANCE} \
            --arg component_name ${COMPONENT_NAME} \
            --arg component_version ${COMPONENT_VERSION} \
            --arg deploy_number ${SOURCE_COMMIT_TIMESTAMP} \
            --arg code_name ${CODE_COMPONENT_NAME} \
            --arg code_purl ${SOURCE_URL} \
            --arg code_commit ${SOURCE_COMMIT} \
            --arg runtime_component_name ${RHDH_APP_INSTANCE} \
            --arg api_server ${RHDH_K8_SERVER} \
            --arg cluster_id ${RHDH_K8_ID} \
            --arg k8ns ${RHDH_K8_NS} \
            --arg image_name ${IMAGE_NAME} \
            --arg image_uri ${IMAGE_URI} '
              { "bomFormat": "ConcertDef",
                "specVersion": "1.0.2",
                "metadata": {
                  "timestamp": $timestamp,
                  "type": "deploy",
                  "environment": $app_env,
                  "component": {
                    "name": $component_name,
                    "version": $component_version,
                    "deploy-number": $deploy_number
                  }
                },
                "components": [
                  { "type": "code",
                    "name": $code_name,
                    "purl": $code_purl,
                    "commit_sha": $code_commit
                  }
                ],
                "runtime-components": [
                  { "type": "kubernetes",
                    "name": $app_env,
                    "api-server": $api_server,
                    "properties": [
                      {
                        "name": "cluster_id",
                        "value": $cluster_id
                      }
                    ],
                    "components": [
                      { "type": "namespace",
                        "name": $k8ns,
                        "components": [
                          { "type": "container",
                            "name": $image_name,
                            "uri": $image_uri
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
          ' -n > ${DEPLOY_SBOM}
          jq . ${DEPLOY_SBOM}
        done


        # ###
        # # Upload ConcertDef DEPLOY Inventory SBOM
        # #
        # UPLOAD_URL=$(cat ${WORKSPACE_CONCERT_API}/endpoint-url)/ingestion/api/v1/upload_files
        # AUTH_TYPE=$(cat ${WORKSPACE_CONCERT_API}/key-type)
        # AUTH_KEY=$(cat ${WORKSPACE_CONCERT_API}/key-value)
        # curl -X POST -sS "${UPLOAD_URL}" \
        #   -H 'accept: application/json' \
        #   -H "InstanceID: $(cat ${WORKSPACE_CONCERT_API}/instance-id)" \
        #   -H "Authorization: ${AUTH_TYPE} ${AUTH_KEY}" \
        #   -H 'Content-Type: multipart/form-data' \
        #   -F "data_type=application_sbom" \
        #   -F "filename=@${DEPLOY_SBOM}" \
        #   2>&1 > $WORKSPACE/log.txt

        # if [[ $? == 0 ]]; then
        #   echo "Successfully uploaded ConcertDef Deploy Inventory SBOM to Concert"
        # else
        #   echo "Failed to upload ConcertDef Deploy Inventory SBOM to Concert"
        #   cat $WORKSPACE/log.txt
        # fi
