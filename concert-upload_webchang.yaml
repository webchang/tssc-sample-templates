apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: concert-upload
spec:
  description: >-
    Upload data to Concert.
  params:
    - name: git-url
      description: Git URL
    - name: image-url
      description: Image URL
    - name: build-task-status
      value: $(tasks.build-container.status)
  workspaces:
    - name: concert-api
      description: Concert API endpoint and credentials
    - name: workspace
      description: The workspace where source code is included.
      optional: true
  steps:
    - name: upload-concertdef-build
      image: icr.io/cpopen/ibm-concert-toolkit:latest
      env:
        - name: GIT_URL
          value: $(params.git-url)
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(tasks.build-container.results.IMAGE_DIGEST)
        - name: BUILD_TASK_STATUS
          value: $(params.build-task-status)
        - name: SOURCE_BUILD_RESULT_FILE
          value: "$(workspaces.workspace.path)/source_build_result.json"
        - name: WORKSPACE_CONCERT_API
          value: $(workspaces.concert-api.path)
        - name: WORKSPACE
          value: $(workspaces.workspace.path)
      script: |
        #!/usr/bin/env bash
        echo 
        echo "uid, gid, etc. via id"
        id
        echo "------"

        echo
        echo "ls -la /"
        ls -la /
        echo "------"

        echo "cd $WORKSPACE"
        cd $WORKSPACE; echo $PWD
        ls -la .
        echo "------"

        echo
        echo "ls -la $WORKSPACE/source"
        ls -la
        echo "------"

        echo
        echo "Upload ConcertDef Build Inventory"
        echo
        echo "Build repository: $GIT_URL"
        if [ "$BUILD_TASK_STATUS" == "Succeeded" ]; then
          echo
          echo "Generated Image is in : $IMAGE_URL"
          echo "Image digest: $IMAGE_DIGEST"
        fi
        if [ -e "$SOURCE_BUILD_RESULT_FILE" ]; then
          url=$(jq -r ".image_url" <"$SOURCE_BUILD_RESULT_FILE")
          echo "Generated Source Image is in : $url"
          echo
          echo "Contents of $SOURCE_BUILD_RESULT_FILE"
          cat $SOURCE_BUILD_RESULT_FILE
          echo "------"
        fi

        curl -X GET -H "Authorization: $(cat ${WORKSPACE_CONCERT_API}/key-type) $(cat ${WORKSPACE_CONCERT_API}/key-value)" -H "InstanceId: $(cat ${WORKSPACE_CONCERT_API}/instance-id)" $(cat ${WORKSPACE_CONCERT_API}/endpoint-url)/core/api/v1/applications 2>&1

        if [[ $? == 0 ]]; then
          echo "Target Concert service is reachable"
        else
          echo "Target Concert service is not reachable"
        fi

        # curl -k "${WORKSPACE_CONCERT_API}/endpoint-url" --silent -o /dev/null

        echo
        echo End Summary
