apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: concert-upload-ci
spec:
  description: >-
    Upload data to Concert.
  params:
    - name: event-type
      type: string
    - name: source-url
      type: string
    - name: source-commit
      type: string
    - name: source-commit-timestamp
      type: string
    - name: image
      type: string
    - name: image-digest
      type: string
    - name: concert-enabled
      type: string
      default: "false"
    - name: concert-component-version
      type: string
      default: "1.0.0"
  workspaces:
    - name: concert-api
      description: Concert API endpoint and credentials
    - name: workspace
      description: The workspace where source code is included.
      optional: true
  steps:
    - name: concert-enablement-validation
      image: registry.access.redhat.com/ubi8-minimal@sha256:7583ca0ea52001562bd81a961da3f75222209e6192e4e413ee226cff97dbd48c
      env:
        - name: CONCERT_ENABLED
          value: $(params.concert-enabled)
        - name: EVENT_TYPE
          value: $(params.event-type)
        - name: SOURCE_URL
          value: $(params.source-url)
        - name: SOURCE_COMMIT
          value: $(params.source-commit)
        - name: SOURCE_COMMIT_TIMESTAMP
          value: $(params.source-commit-timestamp)
        - name: IMAGE_URL
          value: $(params.image)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
        - name: WORKSPACE_CONCERT_API
          value: $(workspaces.concert-api.path)
        - name: WORKSPACE
          value: $(workspaces.workspace.path)
      script: |
        #!/usr/bin/env bash

        if [[ ${CONCERT_ENABLED} == "true" ]]; then
          echo "upload files to Concert"
        else
          exit 0
        fi

        if [[ ${EVENT_TYPE} != "push" ]]; then
          exit 0
        fi

        TIMESTAMP=$(date -d "@${SOURCE_COMMIT_TIMESTAMP}" -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "Source repo URL: $SOURCE_URL"
        echo "Source repo commit: $SOURCE_COMMIT"
        echo "Source repo commit timestamp: $TIMESTAMP"
        echo "Generated image path+tag: $IMAGE_URL"
        echo "Generated image digest: $IMAGE_DIGEST"

        curl -sS -H "Authorization: $(cat ${WORKSPACE_CONCERT_API}/key-type) $(cat ${WORKSPACE_CONCERT_API}/key-value)" -H "InstanceId: $(cat ${WORKSPACE_CONCERT_API}/instance-id)"  $(cat ${WORKSPACE_CONCERT_API}/endpoint-url)/core/api/v1/applications 2>&1 > $WORKSPACE/log.txt

        if [[ $? == 0 ]]; then
          echo "Target Concert service is reachable"
        else
          echo "Target Concert service is not reachable"
          cat $WORKSPACE/log.txt
          exit 1
        fi

        echo "ls -la $WORKSPACE/source"
        ls -la $WORKSPACE/source
        echo "------"

        CONCERT_COMPONENT_NAME=$(basename $SOURCE_URL)
        echo "CONCERT_COMPONENT_NAME: ${CONCERT_COMPONENT_NAME}"

        mkdir -p $WORKSPACE/concert
        CONCERT_HOME=$WORKSPACE/concert
        SBOM_SBOM=${CONCERT_HOME}/${CONCERT_COMPONENT_NAME}-sbom.json
        BUILD_SBOM=${CONCERT_HOME}/${CONCERT_COMPONENT_NAME}-build.json
        APP_SBOM=${CONCERT_HOME}/${CONCERT_COMPONENT_NAME}-app.json
        touch ${SBOM_SBOM}
        touch ${BUILD_SBOM}
        touch ${APP_SBOM}
        echo "ls -la $CONCERT_HOME"
        ls -la $CONCERT_HOME
        echo "------"

    - name: upload-image-sbom
      image: registry.redhat.io/rhtas/cosign-rhel9:e28487714294d5c205e95da843e86fd28e4d3355d6a4d328a872c62ed0cf5f93@sha256:6fa39582a3d62a2aa5404397bb638fdd0960f9392db659d033d7bacf70bddfb1
      onError: continue
      env:
        - name: SOURCE_URL
          value: $(params.source-url)
        - name: IMAGE_URL
          value: $(params.image)
        - name: WORKSPACE_CONCERT_API
          value: $(workspaces.concert-api.path)
        - name: WORKSPACE
          value: $(workspaces.workspace.path)
      script: |
        #!/bin/bash

        CONCERT_COMPONENT_NAME=$(basename $SOURCE_URL)
        echo "CONCERT_COMPONENT_NAME: ${CONCERT_COMPONENT_NAME}"

        CONCERT_HOME=$WORKSPACE/concert
        SBOM_SBOM=${CONCERT_HOME}/${CONCERT_COMPONENT_NAME}-sbom.json
        
        status=-1
        max_try=5
        wait_sec=2
        for run in $(seq 1 $max_try); do
          status=0
          cosign download sbom $IMAGE_URL 2>>err > ${SBOM_SBOM}
          status=$?
          if [ "$status" -eq 0 ]; then
            break
          fi
          sleep $wait_sec
        done
        if [ "$status" -ne 0 ]; then
          echo "Failed to get SBOM after ${max_try} tries" >&2
          cat err >&2
          exit 1
        fi

        if [ ! -s ${SBOM_SBOM} ]; then
          echo "SBOM file is empty: ${SBOM_SBOM}"
          exit 0
        fi

        ###
        # Upload Image SBOM to Concert
        #
        echo "SBOM path: ${SBOM_SBOM}"
        head -50 ${SBOM_SBOM}
        UPLOAD_URL=$(cat ${WORKSPACE_CONCERT_API}/endpoint-url)/ingestion/api/v1/upload_files
        AUTH_TYPE=$(cat ${WORKSPACE_CONCERT_API}/key-type)
        AUTH_KEY=$(cat ${WORKSPACE_CONCERT_API}/key-value)
        curl -X POST -sS "${UPLOAD_URL}" \
          -H 'accept: application/json' \
          -H "InstanceID: $(cat ${WORKSPACE_CONCERT_API}/instance-id)" \
          -H "Authorization: ${AUTH_TYPE} ${AUTH_KEY}" \
          -H 'Content-Type: multipart/form-data' \
          -F "data_type=package_sbom" \
          -F "filename=@${SBOM_SBOM}" \
          2>&1 > $WORKSPACE/log.txt

        if [[ $? == 0 ]]; then
          echo "Successfully uploaded package SBOM to Concert"
        else
          echo "Failed to upload package SBOM to Concert"
          cat $WORKSPACE/log.txt
        fi

    - name: upload-concertdef-build
      image: quay.io/konflux-ci/appstudio-utils:48c311af02858e2422d6229600e9959e496ddef1@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8
      env:
        - name: CONCERT_COMPONENT_VERSION
          value: $(params.concert-component-version)
        - name: SOURCE_URL
          value: $(params.source-url)
        - name: SOURCE_COMMIT
          value: $(params.source-commit)
        - name: SOURCE_COMMIT_TIMESTAMP
          value: $(params.source-commit-timestamp)
        - name: IMAGE_URL
          value: $(params.image)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
        - name: WORKSPACE_CONCERT_API
          value: $(workspaces.concert-api.path)
        - name: WORKSPACE
          value: $(workspaces.workspace.path)
      script: |
        #!/usr/bin/env bash

        CONCERT_COMPONENT_NAME=$(basename $SOURCE_URL)
        echo "CONCERT_COMPONENT_NAME: ${CONCERT_COMPONENT_NAME}"

        CONCERT_HOME=$WORKSPACE/concert
        echo "ls -la $WORKSPACE/concert"
        ls -la $WORKSPACE/concert
        echo "------"

        echo "Concert component name: $CONCERT_COMPONENT_NAME"
        echo "Concert component version: $CONCERT_COMPONENT_VERSION"
        TIMESTAMP=$(date -d "@${SOURCE_COMMIT_TIMESTAMP}" -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "Concert component build-number: $TIMESTAMP"

        # Create BOM-LINK for the image CycloneDX SBOM
        #
        SBOM_SBOM=${CONCERT_HOME}/${CONCERT_COMPONENT_NAME}-sbom.json
        if [ -s ${SBOM_SBOM} ]; then
          echo "image SBOM is available at: ${SBOM_SBOM}"
          sbom_num=$(jq '.serialNumber' ${SBOM_SBOM})
          sbom_ver=$(jq '.version' ${SBOM_SBOM})
          export SBOM_LINK="$(echo $sbom_num | sed s/\"//g )/$ver"
          # add SBOM_LINK to the build SBOM
          echo "SBOM-LINK: $SBOM_LINK"
        fi


